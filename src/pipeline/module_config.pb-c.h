/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: module_config.proto */

#ifndef PROTOBUF_C_module_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_module_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct ConfigParameter ConfigParameter;
typedef struct ModuleConfig ModuleConfig;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  CONFIG_PARAMETER__VALUE__NOT_SET = 0,
  CONFIG_PARAMETER__VALUE_BOOL_VALUE = 2,
  CONFIG_PARAMETER__VALUE_INT_VALUE = 3,
  CONFIG_PARAMETER__VALUE_FLOAT_VALUE = 4,
  CONFIG_PARAMETER__VALUE_STRING_VALUE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONFIG_PARAMETER__VALUE__CASE)
} ConfigParameter__ValueCase;

/*
 * Define a message parameter for representing generic values
 */
struct  ConfigParameter
{
  ProtobufCMessage base;
  char *key;
  ConfigParameter__ValueCase value_case;
  union {
    protobuf_c_boolean bool_value;
    int32_t int_value;
    float float_value;
    char *string_value;
  };
};
#define CONFIG_PARAMETER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config_parameter__descriptor) \
    , (char *)protobuf_c_empty_string, CONFIG_PARAMETER__VALUE__NOT_SET, {0} }


/*
 * Define a message type for module configuration
 */
struct  ModuleConfig
{
  ProtobufCMessage base;
  size_t n_parameters;
  ConfigParameter **parameters;
};
#define MODULE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&module_config__descriptor) \
    , 0,NULL }


/* ConfigParameter methods */
void   config_parameter__init
                     (ConfigParameter         *message);
size_t config_parameter__get_packed_size
                     (const ConfigParameter   *message);
size_t config_parameter__pack
                     (const ConfigParameter   *message,
                      uint8_t             *out);
size_t config_parameter__pack_to_buffer
                     (const ConfigParameter   *message,
                      ProtobufCBuffer     *buffer);
ConfigParameter *
       config_parameter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config_parameter__free_unpacked
                     (ConfigParameter *message,
                      ProtobufCAllocator *allocator);
/* ModuleConfig methods */
void   module_config__init
                     (ModuleConfig         *message);
size_t module_config__get_packed_size
                     (const ModuleConfig   *message);
size_t module_config__pack
                     (const ModuleConfig   *message,
                      uint8_t             *out);
size_t module_config__pack_to_buffer
                     (const ModuleConfig   *message,
                      ProtobufCBuffer     *buffer);
ModuleConfig *
       module_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   module_config__free_unpacked
                     (ModuleConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ConfigParameter_Closure)
                 (const ConfigParameter *message,
                  void *closure_data);
typedef void (*ModuleConfig_Closure)
                 (const ModuleConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor config_parameter__descriptor;
extern const ProtobufCMessageDescriptor module_config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_module_5fconfig_2eproto__INCLUDED */
