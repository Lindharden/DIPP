#!/bin/bash

modules=(1 4 16 32 64) # Amount of modules
sizes=(1 2 4 8 16 32 64 128 256 512 1) # Image sizes
reps=${1:-10} # Default to 50 unless provided as argument

# LATENCY / THROUGHPUT EXPERIMENTS
echo "Running latency/throughput experiments"
echo "modules size latency(ms) throughput(MB/sec)" > "dipp_time_experiment.txt"
stdbuf -oL dipp -i CAN -p can0 -a 162 -q >> "dipp_time_experiment.txt" &
dipp_process=$!

for module in "${modules[@]}"; do
    echo "Executing with $module modules"
    for size in "${sizes[@]}"; do
        for i in $(seq 1 $reps); do
            test_cam $size $module 1
        done
    done
done

sleep 120
kill $dipp_process >/dev/null 2>&1

# PERF EXPERIMENTS
echo "Running perf experiments"
echo "modules size rep cache-misses cache-references context-switches cpu-cycles instructions" > "dipp_perf_experiment.txt"
for module in "${modules[@]}"; do
    echo "Executing with $module modules"
    for size in "${sizes[@]}"; do
        for i in $(seq 1 $reps); do 
            test_cam $size $module 0
            perf stat -e cache-misses,cache-references,context-switches,cpu-cycles,instructions dipp -i CAN -p can0 -a 162 > "dipp_perf_result.txt" 2>&1

            perf_stats=($(grep -E 'cache-misses|cache-references|context-switches|cpu-cycles|instructions' "dipp_perf_result.txt" | awk '{gsub(",", ""); print $1}'))
            result="$module $size $i "

            for (( j = 0; j < 5; j++ )); do
                res=$((perf_stats[j]))
                result+=$(printf "%'d" "$res")" "
            done

            echo "${result% }" >> dipp_perf_experiment.txt  # Remove trailing space and print
        done
    done
done

rm "dipp_perf_result.txt"

# MEMORY EXPERIMENTS
top_output="top_output.txt"
echo "Running memory experiments"
echo "modules size rep snapshot %CPU %MEM mem_total mem_free mem_used mem_buff_cache swap_total swap_free swap_used swap_avail" > "dipp_top_experiment.txt"
for module in "${modules[@]}"; do
    echo "Executing with $module modules"
    for size in "${sizes[@]}"; do
        for rep in $(seq 1 $reps); do 
            test_cam $size $module 0

            top -b -d 0.1 > "$top_output" &
            top_pid=$!

            sleep 0.2

            dipp -i CAN -p can0 -a 162 >/dev/null &
            dipp_pid=$!

            wait "$dipp_pid"

            sleep 0.2

            kill $top_pid >/dev/null 2>&1
            wait $top_pid >/dev/null 2>&1

            cpu_dipp_total="0.0"
            mem_dipp_total="0.0"

            mem_total="0.0"
            mem_free="0.0"
            mem_used="0.0"
            mem_buff_cache="0.0"

            swap_total="0.0"
            swap_free="0.0"
            swap_used="0.0"
            swap_avail="0.0"
            i=0        

            while IFS= read -r line; do
                if [[ $line =~ ^top ]]; then
                    if [[ $i > 0 ]]; then
                        echo "$module $size $rep $i $cpu_dipp_total $mem_dipp_total $mem_total $mem_free $mem_used $mem_buff_cache $swap_total $swap_free $swap_used $swap_avail" >> "dipp_top_experiment.txt"
                        # Reset values in case the processes are not present
                        cpu_dipp_total=0.0
                        mem_dipp_total=0.0
                        
                        mem_total="0.0"
                        mem_free="0.0"
                        mem_used="0.0"
                        mem_buff_cache="0.0"

                        swap_total="0.0"
                        swap_free="0.0"
                        swap_used="0.0"
                        swap_avail="0.0"
                    fi
                    ((i++))
                fi
                if [[ $line =~ dipp ]]; then
                    cpu_dipp=$(echo "$line" | awk '{print $9}')
                    mem_dipp=$(echo "$line" | awk '{print $10}')
                    cpu_dipp_total=$(echo "$cpu_dipp_total + $cpu_dipp" | bc)
                    mem_dipp_total=$(echo "$mem_dipp_total + $mem_dipp" | bc)
                fi
                if [[ $line =~ "MiB Mem" ]]; then
                    mem_total=$(echo "$line" | awk '{print $4}')
                    mem_free=$(echo "$line" | awk '{print $6}')
                    mem_used=$(echo "$line" | awk '{print $8}')
                    mem_buff_cache=$(echo "$line" | awk '{print $10}')
                fi
                if [[ $line =~ "MiB Swap" ]]; then
                    swap_total=$(echo "$line" | awk '{print $3}')
                    swap_free=$(echo "$line" | awk '{print $5}')
                    swap_used=$(echo "$line" | awk '{print $7}')
                    swap_avail=$(echo "$line" | awk '{print $9}')
                fi
            done < $top_output
            echo "$module $size $rep $i $cpu_dipp_total $mem_dipp_total $mem_total $mem_free $mem_used $mem_buff_cache $swap_total $swap_free $swap_used $swap_avail" >> "dipp_top_experiment.txt"
        done
    done
done
echo "Done"
