#!/bin/bash

modules=(1 2 4 8 16 32 64 128) # Amount of modules
sizes=(1 2 4 8 16 32 64 128) # Image sizes
reps=${1:-50} # Default to 50 unless provided as argument

# LATENCY / THROUGHPUT EXPERIMENTS
echo "Running latency/throughput experiments"
echo "modules size latency(ms) throughput(MB/sec)" > "dipp_time_experiment.txt"
stdbuf -oL ./builddir/dipp -i ZMQ -p localhost -a 162 -q >> "dipp_time_experiment.txt" &
dipp_process=$!

for module in "${modules[@]}"; do
    echo "Executing with $module modules"
    for size in "${sizes[@]}"; do
        for i in $(seq 1 $reps); do 
            ./builddir/test_cam $size $module
        done
    done
done

sleep 10
kill $dipp_process >/dev/null 2>&1

# PERF EXPERIMENTS
echo "Running perf experiments"
echo "modules size rep cache-misses cache-references context-switches cpu-cycles instructions" > "dipp_perf_experiment.txt"
for module in "${modules[@]}"; do
    echo "Executing with $module modules"
    for size in "${sizes[@]}"; do
        for i in $(seq 1 $reps); do 
            ./builddir/test_cam $size $module
            perf stat -e cache-misses,cache-references,context-switches,cpu-cycles,instructions ./builddir/dipp -i ZMQ -p localhost -a 162 > "dipp_perf_result.txt" 2>&1

            perf_stats=($(grep -E 'cache-misses|cache-references|context-switches|cpu-cycles|instructions' "dipp_perf_result.txt" | awk '{gsub(",", ""); print $1}'))
            result="$module $size $i "

            for (( j = 0; j < 5; j++ )); do
                res=$((perf_stats[j]))
                result+=$(printf "%'d" "$res")" "
            done

            echo "${result% }" >> dipp_perf_experiment.txt  # Remove trailing space and print
        done
    done
done

rm "dipp_perf_result.txt"

# MEMORY EXPERIMENTS
top_output="top_output.txt"
echo "Running memory experiments"
echo "modules size rep snapshot %CPU %MEM mem_used" > "dipp_top_experiment.txt"
for module in "${modules[@]}"; do
    echo "Executing with $module modules"
    for size in "${sizes[@]}"; do
        for rep in $(seq 1 $reps); do 
            ./builddir/test_cam $size $module

            top -b -d 0.1 > "$top_output" &
            top_pid=$!

            ./builddir/dipp -i ZMQ -p localhost -a 162 &
            dipp_pid=$!

            wait "$dipp_pid"

            cpu_dipp="0.0"
            mem_dipp="0.0"
            mem_used="0.0"
            dipp_read=false
            i=0        

            while IFS= read -r line; do
                if [[ $line =~ ^top ]]; then
                    if [[ $i > 0 ]]; then
                        echo "$module $size $rep $i $cpu_dipp $mem_dipp $mem_used" >> "dipp_top_experiment.txt"
                        # Reset values in case the processes are not present
                        cpu_dipp="0.0"
                        mem_dipp="0.0"
                        dipp_read=false
                    fi
                    ((i++))
                fi
                if [[ $line =~ dipp ]] && ! $dipp_read; then
                    cpu_dipp=$(echo "$line" | awk '{print $9}')
                    mem_dipp=$(echo "$line" | awk '{print $10}')
                    dipp_read=true
                fi
                if [[ $line =~ "MiB Mem" ]]; then
                    mem_used=$(echo "$line" | awk '{print $8}')
                fi
            done < $top_output
            echo "$module $size $rep $i $cpu_dipp $mem_dipp $mem_used" >> "dipp_top_experiment.txt"
        done
    done
done
echo "Done"